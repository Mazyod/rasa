name: Continuous Integration

on:
  push:
    branches:
    - master
    tags:
    - '*'
  pull_request:

# SECRETS
# - GH_RELEASE_NOTES_TOKEN: personal access token of `rasabot` github account
#                           (login for account in 1pw)
# - SLACK_WEBHOOK_TOKEN: token to post to RasaHQ slack account (in 1password)
# - PYPI_TOKEN: publishing token for amn41 account, needs to be maintainer of
#               RasaHQ/rasa on pypi (account credentials in 1password)
# - DOCKERHUB_PASSWORD: password for an account with write access to the rasa
#                       repo on hub.docker.com. used to pull and upload containers

env:
  # needed to fix issues with boto during testing:
  # https://github.com/travis-ci/travis-ci/issues/7940
  BOTO_CONFIG: /dev/null

jobs:
  api:
    name: Test API specification
    runs-on: ubuntu-latest

    steps:
    - name: Checkout git repository üïù
      uses: actions/checkout@v2

    - name: Setup Node ü¶ù
      uses: actions/setup-node@v1
      with:
        node-version: '10.x'

    - name: Run Swagger üïµÔ∏è‚Äç‚ôÄÔ∏è
      run: |
        npm install -g swagger-cli
        swagger-cli validate docs/static/spec/action-server.yml
        swagger-cli validate docs/static/spec/rasa.yml

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 3
      matrix:
        os: [windows-latest]
        python-version: [3.6]

    steps:
    - name: Checkout git repository üïù
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }} üêç
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Read Poetry Version üî¢
      run: |
        echo "::set-env name=POETRY_VERSION::$(scripts/poetry-version.sh)"
      shell: bash

    - name: Install poetry ü¶Ñ
      uses: Gr1N/setup-poetry@v1
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Set up virtual environment (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        python -m venv $HOME\rasa-venv
        . $HOME\rasa-venv\Scripts\activate

    - name: Load Poetry Cached Libraries ‚¨á (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/cache@v1
      with:
        path: $HOME/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry-${{ matrix.python-version }}

    - name: Load Poetry Cached Libraries ‚¨á (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v1
      with:
        path: $HOME\rasa-venv
        key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ runner.os }}-poetry-${{ matrix.python-version }}

    - name: Install Dependencies (Linux) üì¶
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get -y install libpq-dev
        make install-full | tee .output
        if grep 'The lock file is not up to date' .output; then exit 1; fi
        make prepare-tests-ubuntu

    - name: Install Dependencies (Windows) üì¶
      if: matrix.os == 'windows-latest'
      run: |
        make install-full
        make prepare-tests-windows

    - name: Test Code üîç
      # We don't test Windows code with Python 3.8 because there is an issue
      # with python-crc32c library ‚Äî¬†CFFI is not supported by Github Runners (the corresponding
      # C++ Build Tools are not installed on their machines). In this case, python-crc32c
      # should use a pure Python implementation of CFFI but Google made a mistake with
      # the order of arguments in their code, and their solution doesn't work.
      # This PR fixes the issue but it's not merged yet:
      # https://github.com/googleapis/python-crc32c/pull/27
      if: matrix.os != 'windows-latest' || matrix.python-version != '3.8'
      env:
        JOBS: 2
        PYTHONIOENCODING: "utf-8"
      run: make test

    - name: Send Coverage Report üìä
      if: matrix.python-version == 3.6
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_SERVICE_NAME: github
      run: poetry run coveralls

  mergepal-merge: # run merge pal in the end
    runs-on: ubuntu-latest
    needs: [test, api]
    steps:
      - uses: actions/checkout@v1
      - name: Make sure there is a github token
        shell: bash
        run: |
          if [ -z "${{ secrets.RASABOT_AUTOMERGE_GITHUB_TOKEN }}" ]; then
            echo ::set-env name=MERGE_TOKEN::${{ secrets.GITHUB_TOKEN }}
          else
            echo ::set-env name=MERGE_TOKEN::${{ secrets.RASABOT_AUTOMERGE_GITHUB_TOKEN }}
          fi
      - uses: rasahq/merge-pal-action@master
        with:
          token: ${{ env.MERGE_TOKEN }}
